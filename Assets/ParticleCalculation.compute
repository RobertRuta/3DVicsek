// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateParticles

struct Particle
{
    float3 position;
    float3 velocity;
    float3 color;
    //uint grid_ID;
};


RWStructuredBuffer<Particle> particles;


float deltaTime;
float speed;
float3 box;

float3 BoundToBox(float3 pos)
{
    [branch] if(pos.x > box.x)
    {
       pos.x -= 2*box.x;
    }
    [branch] if(pos.x < -box.x)
    {
        pos.x += 2*box.x;
    }
    [branch] if(pos.y > box.y)
    {
        pos.y -= 2*box.y;
    }
    [branch] if(pos.y < -box.y)
    {
        pos.y += 2*box.y;
    }
    [branch] if(pos.z > box.z)
    {
        pos.z -= 2*box.z;
    }
    [branch] if(pos.z < -box.z)
    {
        pos.z += 2*box.z;
    }

    return pos;
}

[numthreads(128,1,1)]
void UpdateParticles (uint3 id : SV_DispatchThreadID)
{
    //Updated Particle Velocities
    
    
    //Updated Particle Positions
    particles[id.x].position += particles[id.x].velocity * deltaTime;

    //Keep particles in a box - teleport from one side to the other when crossing boundary
    particles[id.x].position = BoundToBox(particles[id.x].position);

    // Set particle colours
    particles[id.x].color = float3(0,0.5f,1);
}
