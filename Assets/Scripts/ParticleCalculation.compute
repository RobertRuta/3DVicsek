// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateParticles
#pragma kernel UpdateGrid

struct Particle
{
    float3 position;
    float3 velocity;
    float3 color;
};
struct Cell
{
    uint id;
    uint3 position;
};


RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<Cell> cells;
RWStructuredBuffer<uint2> cellparticleindices;
RWStructuredBuffer<uint2> neighbourCellBounds;
RWStructuredBuffer<uint> particleIDs;
RWStructuredBuffer<uint> cellIDs;
RWStructuredBuffer<uint> neighbourCellIDs;
RWStructuredBuffer<float3> temp_vels_Buffer;


uint numParticles;
float deltaTime;
float speed;
float radius;
float noise;
float cellDim;
float3 box;
uint3 gridDims;
uint neighbourCellCount;
uint rng_state;



// Binds particles to box. If particle leaves box it is teleported to other side.
float3 BoundToBox(float3 pos)
{
    [branch] if(pos.x > box.x)
    {
       pos.x -= box.x;
    }
    [branch] if(pos.x < 0.0)
    {
        pos.x += box.x;
    }
    [branch] if(pos.y > box.y)
    {
        pos.y -= box.y;
    }
    [branch] if(pos.y < 0.0)
    {
        pos.y += box.y;
    }
    [branch] if(pos.z > box.z)
    {
        pos.z -= box.z;
    }
    [branch] if(pos.z < 0.0)
    {
        pos.z += box.z;
    }

    return pos;
}

uint3 CalcCellCoords(float3 pos)
{
    // cell {0, 0, 0} is found at coordinate origin and has index 0
    uint cellX = (uint) (pos.x / cellDim);
    uint cellY = (uint) (pos.y / cellDim);
    uint cellZ = (uint) (pos.z / cellDim);
    uint3 cellXYZ = {cellX, cellY, cellZ};

    return cellXYZ;
}

// Computes cell id given particle position
uint CalcCellID(float3 pos)
{
    uint3 cellPos = CalcCellCoords(pos);
    uint cellID = cellPos.x + cellPos.y*gridDims.x + cellPos.z*gridDims.x*gridDims.y;

    return cellID;
}
uint CalcCellID_FromCell(uint3 cellPos)
{
    uint cellID = cellPos.x + cellPos.y*gridDims.x + cellPos.z*gridDims.x*gridDims.y;

    return cellID;
}


void ComputeNeighbourCells(float3 pos)
{
    //uint3 homeCellXYZ = CalcCellCoords(pos);   
    uint3 homeCellXYZ = {121,397,28};   
    uint3 newCellXYZ = homeCellXYZ;

    int3 start = {-1, -1, -1};
    int3 end = {1, 1, 1};

    /// Account for edge cases ///
    start.x = homeCellXYZ.x <= 0 ? 0 : start.x;
    start.y = homeCellXYZ.y <= 0 ? 0 : start.y;
    start.z = homeCellXYZ.z <= 0 ? 0 : start.z;
    end.x = homeCellXYZ.x >= gridDims.x - 1 ? 0 : end.x;
    end.y = homeCellXYZ.y >= gridDims.y - 1 ? 0 : end.y;
    end.z = homeCellXYZ.z >= gridDims.z - 1 ? 0 : end.z;

    /// Itterate through home and neighbour cells, compute and store IDs ///
    uint i = 0;
    for (int x = start.x; x <= end.x; x++)
    {
        newCellXYZ.x = homeCellXYZ.x + x;
        for (int y = start.y; y <= end.y; y++)
        {
            newCellXYZ.y = homeCellXYZ.y + y;
            for (int z = start.z; z <= end.z; z++)
            {
                newCellXYZ.z = homeCellXYZ.z + z;                
                neighbourCellIDs[i] = CalcCellID_FromCell(newCellXYZ);
                i++;
            }
        }
    }

    neighbourCellCount = i + 1;
}

void ComputeNeighbourCellBounds()
{
    for (uint ncID = 0; ncID < neighbourCellCount; ncID++)
    {
        // key value ID of particleID, cellID pair to be used to index cell sorted buffers
        uint cID = 0;
        uint start_end_flip = 0;

        while (start_end_flip < 2 && cID < numParticles)
        {
            // actual cell ID
            uint ID = cellIDs[cID];
            // the actual neighbour cell ID
            uint nID = neighbourCellIDs[ncID];

            if (ID == nID && start_end_flip == 0)
            {
                neighbourCellBounds[ncID].x = cID;
                start_end_flip++;
            }

            if (ID != nID && start_end_flip == 1)
            {
                neighbourCellBounds[ncID].y = cID - 1;
                start_end_flip++;
            }
            
            // Accounts for edge case
            if (cID == numParticles - 1)
            {
                if (start_end_flip == 1)
                    neighbourCellBounds[ncID].y = cID;
            }

            cID++;
        }
    }
}
float3 ComputeAverageNeighbourVelocity(float3 pos)
{
    float3 sum = {0.0, 0.0, 0.0};

    for (uint ncID = 0; ncID < neighbourCellCount; ncID++)
    {
        // Inclusive start and end IDs
        uint startID = neighbourCellBounds[ncID].x;
        uint endID = neighbourCellBounds[ncID].y;

        for (uint ID = startID; ID <= endID; ID++)
        {
            uint pID = particleIDs[ID];
            Particle neighbour = particles[pID];
            
            if (distance(pos, neighbour.position) < radius)
                sum += neighbour.velocity;
        }
    }

    return normalize(sum);
}

/*
*/


// Use this function to compute the velocities of neighbours
float3 ComputeNeighbourVelocities(float3 pos)
{
    ComputeNeighbourCells(pos);
    // Compute start end indices in sorted cellID buffer
        // This is parallelizable...
    /*
    ComputeNeighbourCellBounds();
    // Use start end indices to find particles that are in neighbouring cells only
        // This is parallelizable...
    float3 ave_neighbour_velocity = ComputeAverageNeighbourVelocity(pos);
    // Add noise vector to average neighbour velocity   
    return ave_neighbour_velocity;
    */
    
    
    return float3(1.0, 2.0, 3.0);
}

// Nathan Reed xorshift
uint rand_xorshift()
{
    // Xorshift algorithm from George Marsaglia's paper
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}

// Thomas Wang 
uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

// Jarzynski and Olano
uint rand_pcg()
{
    uint state = rng_state;
    rng_state = rng_state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}


[numthreads(128,1,1)]
void UpdateParticles (uint3 id : SV_DispatchThreadID)
{
    uint pID = id.x;


    //Updated Particle Velocities
        //Set particle velocities to normalised sum of neighbour velocities
    float3 pos = particles[pID].position;
    float3 vel = ComputeNeighbourVelocities(pos);
    //particles[pID].velocity = vel;
    //temp_vels_Buffer[pID] = vel;
    //particles[pID].velocity = float3(0.0,0.0,0.0);
    
    // rng_state = pID;
    // uint rand_int_x = rand_xorshift();
    // uint rand_int_y = rand_pcg();
    // uint rand_int_z = rand_pcg();
    // int3 rand_vec = {rand_int_x, rand_int_y, rand_int_z};
    
    // float3 noise_vec = (rand_vec / 4294967296.0).normalize; 

    // float3 newVel = vel + noise_vec*noise;

    



    
    
    //Updated Particle Positions
    particles[id.x].position += particles[id.x].velocity * deltaTime;

    //Keep particles in a box - teleport from one side to the other when crossing boundary
    particles[id.x].position = BoundToBox(particles[id.x].position);

    // Set particle colours
    particles[id.x].color = float3(0,0.5f,1);
}


[numthreads(128,1,1)]
void UpdateGrid (uint3 id : SV_DispatchThreadID)
{
    uint pID = id.x;    
    float3 pos = particles[pID].position;
    uint cellID = CalcCellID(pos);

    particleIDs[pID] = pID;
    cellIDs[pID] = cellID;

    cells[cellID].id = cellID;
    cells[cellID].position = CalcCellCoords(pos);
}