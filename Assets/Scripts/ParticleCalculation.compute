// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateParticles
#pragma kernel UpdateGrid

struct Particle
{
    float3 position;
    float3 velocity;
    float3 color;
};


RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<uint2> cellparticleindices;
RWStructuredBuffer<uint2> neighbourCellBounds;
RWStructuredBuffer<uint> particleIDs;
RWStructuredBuffer<uint> cellIDs;
RWStructuredBuffer<uint> neighbourCellIDs;



float deltaTime;
float speed;
float radius;
float cellDim;
float3 box;
uint3 gridDims;
uint neighbourCellCount;


// Binds particles to box. If particle leaves box it is teleported to other side.
float3 BoundToBox(float3 pos)
{
    [branch] if(pos.x > box.x)
    {
       pos.x -= box.x;
    }
    [branch] if(pos.x < 0.0)
    {
        pos.x += box.x;
    }
    [branch] if(pos.y > box.y)
    {
        pos.y -= box.y;
    }
    [branch] if(pos.y < 0.0)
    {
        pos.y += box.y;
    }
    [branch] if(pos.z > box.z)
    {
        pos.z -= box.z;
    }
    [branch] if(pos.z < 0.0)
    {
        pos.z += box.z;
    }

    return pos;
}

uint3 CalcGridCoords(float3 pos)
{
    // cell {0, 0, 0} is found at coordinate origin and has index 0
    uint cellX = (uint) (pos.x / cellDim);
    uint cellY = (uint) (pos.y / cellDim);
    uint cellZ = (uint) (pos.z / cellDim);
    uint3 cellXYZ = {cellX, cellY, cellZ};

    return cellXYZ;
}

// Computes cell id given particle position
uint CalcCellID(float3 pos)
{
    uint3 cellPos = CalcGridCoords(pos);
    uint cellID = cellPos.x + cellPos.y*gridDims.x + cellPos.z*gridDims.x*gridDims.y;

    return cellID;
}


void ComputeNeighbourCells(uint cellID)
{
    // Implement the below function
    //uint3 cellXYZ = CalcCellCoords(cellID);
    uint3 newCellXYZ = cellXYZ;
    uint i = 0;
    for (int x = -1; x <= 1; x++)
    {
        if (newCellXYZ.x < 0)
            x = 0;
        if (newCellXYZ.x > box.x)
            x = box.x - 1;
        newCellXYZ.x += x;

        for (int y = -1; y <= 1; y++)
        {
            if (newCellXYZ.y < 0)
                y = 0;
            if (newCellXYZ.y > box.y)
                y = box.y - 1;
            newCellXYZ.y += y; 

            for (int z = -1; z <= 1; z++)
            {
                if (newCellXYZ.z < 0)
                    y = 0;
                if (newCellXYZ.z > box.z)
                    z = box.z - 1;
                newCellXYZ.z += z; 
            }

        }

        neighbourCellIDs[i] = newCellXYZ;
        i++;
    }

    neighbourCellCount = i;
}

void ComputeNeighbourCellBounds()
{
    for (uint ncID = 0; ncID < neighbourCellCount; ncID++)
    {
        // key value ID of particleID, cellID pair to be used to index cell sorted buffers
        uint cID = 0;
        uint start_end_flip = 0;

        while (start_end_flip < 2 && cID < numParticles)
        {
            // actual cell ID
            uint ID = cellIDs[cID];
            // the actual neighbour cell ID
            uint nID = neighbourCellIDs[ncID]

            if (ID == nID && start_end_flip == 0)
            {
                neighbourCellBounds.x = cID;
                start_end_flip++;
            }

            if (ID != nID && start_end_flip == 1)
            {
                neighbourCellBounds[ncID].y = cID - 1;
                start_end_flip++;
            }
            
            // Accounts for edge case
            if (cID == numParticles - 1)
            {
                if (start_end_flip == 1)
                    neighbourCellBounds[ncID].y = cID;
            }

            cID++;
        }
    }
}

float3 ComputeAverageNeighbourVelocity(float3 pos)
{
    float3 sum = {0.0, 0.0, 0.0};

    for (uint ncID = 0; ncID < neighbourCellCount; ncID++)
    {
        // Inclusive start and end IDs
        uint startID = neighbourCellBounds[ncID].x;
        uint endID = neighbourCellBounds[ncID].y;

        for (uint ID = startID; ID <= endID; ID++)
        {
            pID = particleIDs[ID];
            neighbour = particles[pID];
            
            if (distance(pos, neighbour.position) < radius)
                sum += neighbour.velocity;
        }
    }

    return sum.normalize;
}


// Use this function to compute the velocities of neighbours
float3 ComputeNeighbourVelocities(float3 pos)
{
    uint cell = CalcCellID(pos);
    ComputeNeighbourCells(cell);
    // Compute start end indices in sorted cellID buffer
        // This is parallelizable...
    ComputeNeighbourCellBounds();
    // Use start end indices to find particles that are in neighbouring cells only
        // This is parallelizable
    float3 ave_neighbour_velocity = ComputeAverageNeighbourVelocity();
    
    

    float3 temp = {0, 0, 0};
    return temp;
}


[numthreads(128,1,1)]
void UpdateParticles (uint3 id : SV_DispatchThreadID)
{
    uint pID = id.x;


    //Updated Particle Velocities
        //Set particle velocities to normalised sum of neighbour velocities
    //particles[id.x].velocity = ComputeNeighbourVelocities(id.x);
    
    //Updated Particle Positions
    particles[id.x].position += particles[id.x].velocity * deltaTime;

    //Keep particles in a box - teleport from one side to the other when crossing boundary
    particles[id.x].position = BoundToBox(particles[id.x].position);

    // Set particle colours
    particles[id.x].color = float3(0,0.5f,1);
}


[numthreads(128,1,1)]
void UpdateGrid (uint3 id : SV_DispatchThreadID)
{
    uint pID = id.x;    
    float3 pos = particles[pID].position;
    uint cell = CalcCellID(pos);

    particleIDs[pID] = pID;
    cellIDs[pID] = cell;
}


[numthreads(128,1,1)]
void SortIndices (uint3 id : SV_DispatchThreadID)
{
    uint ID = id.x;
    // Figure out a way to sort cellparticleindicesbuffer... and change that ugly ass name
    // This may be obsolete comment, we'll see if sorter works

}